#!/bin/bash
#
# pvefind: find vm's/containers on proxmox systems

CFG=~/.pve-find.ini
SW="jq curl"

usage() {
   echo "Usage: pve-find [name]"
   echo "Searches all nodes/clusters defined in the config file for VM/CT names containing"
   echo "the given name."
   exit 1
}

parse_config() {

   while IFS='= ' read var val
   do
      if [[ $var == \[*] ]]
      then
          section=${var:1:-1}
      elif [[ $val ]]
      then
          declare -g -A "$var[$section]=$val"
      fi
   done < $CFG
}

find_name() {
   cluster=$1
   name=$2

   unset clause
   test $active -eq 1 && clause="and .status == \"running\""

   data=$(curl -s -k -d "username=${user[$cluster]}&password=${password[$cluster]}"  https://${hostname[$cluster]}:8006/api2/json/access/ticket)
   test "$data" = "${data/ticket/}" && { echo "Unable to login to PVE."; exit 1; }

   cookie=$(echo $data | jq --raw-output '.data.ticket' | sed 's/^/PVEAuthCookie=/')
   token=$(echo $data | jq --raw-output '.data.CSRFPreventionToken')
   CURL="curl -f -s -S -k -b $cookie"

   nodes="$($CURL -H "CSRFPreventionToken: $token" https://${hostname[$cluster]}:8006/api2/json/nodes/ | jq -r ".data[] | .node")"
   for node in $nodes
   do
      data="$($CURL -H "CSRFPreventionToken: $token" https://${hostname[$cluster]}:8006/api2/json/nodes/$node/lxc/) $($CURL -H "CSRFPreventionToken: $token" https://${hostname[$cluster]}:8006/api2/json/nodes/$node/qemu/)"
      echo $data | jq -r ".data[] | select((.name  | contains(\"$name\")) $clause) | \"$node \(.name) \(.type // \"qemu\")\""
   done
}

sanity_check() {
   err=0

   ! test -f $CFG && { echo "No config file found ($CFG)."; err=1; }

   test $err -eq 0 && test $(stat -c %a $CFG) -gt 600 && { echo "Unsafe permissions on config file."; err=1; }

   for name in $SW
   do
      if ! which $name > /dev/null 2>&1
      then
         missing="$missing $name"
         err=1
      fi
   done
   test "$missing" != "" && echo "Missing required software to run script:$missing"

   test $# -lt 1 && { echo "At least one argument required."; err=1; }

   test $err -ne 0 && usage
}

main() {
   unset https_proxy
   active=1

   sanity_check "$@"

   parse_config

   test "$1" = "-i" && { active=0; shift; }
   name=$1

   for cluster in ${!hostname[*]}
   do
      find_name $cluster $name &
   done
   wait
}

main "$@"
